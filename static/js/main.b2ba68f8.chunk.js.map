{"version":3,"sources":["component/utils2.js","component/SudokuTable.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["solve","suduko","r","c","num","isPossible","row","col","table","map","n","rowTab","colTab","Object","assign","rows","slice","reduce","col1","col2","concat","includes","handelSolve","soduko","sudukoCopy","every","cell","toast","success","error","defaultTable","Array","fill","SudokuTable","useState","sudoku","setSudoku","className","rowIndex","colIndex","type","maxLength","size","value","onChange","currentTarget","test","onClick","example","Math","random","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2ba68f8.chunk.js","sourcesContent":["import { toast } from \"react-toastify\";\r\n\r\nfunction solve(suduko) {\r\n  for (let r = 0; r < 9; r++) {\r\n    for (let c = 0; c < 9; c++) {\r\n      if (!suduko[r][c]) {\r\n        for (let num = 1; num <= 10; num++) {\r\n          if (num === 10) {\r\n            return false;\r\n          }\r\n          if (isPossible(r, c, num, suduko)) {\r\n            suduko[r][c] = num;\r\n            if (solve(suduko)) break;\r\n            suduko[r][c] = \"\";\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nconst isLegalSudoku = (soduko) =>\r\n  soduko.every((row, r) =>\r\n    row.every((cell, c) => isPossible(r, c, cell, soduko))\r\n  );\r\n\r\nconst isPossible = (row, col, num, [...table]) => {\r\n  let [rowTab, colTab] = [row, col].map((n) => ((n / 3) | 0) * 3);\r\n  table[row] = Object.assign([...table[row]], { [col]: \"\" });\r\n  return ![\r\n    ...table[row],\r\n    ...table.map((rows) => rows[col]),\r\n    ...table\r\n      .slice(rowTab, rowTab + 3)\r\n      .reduce((col1, col2) => col1.concat(col2.slice(colTab, colTab + 3)), []),\r\n  ].includes(num);\r\n};\r\n\r\nexport const handelSolve = (suduko) => {\r\n  let sudukoCopy = suduko.map((row) => [...row]);\r\n  solve(sudukoCopy);\r\n  if (isLegalSudoku(sudukoCopy)) {\r\n    toast.success(\"Suduko solve successfuly\");\r\n    return sudukoCopy;\r\n  }\r\n  toast.error(\"Illegal sudoku\");\r\n  return suduko;\r\n};\r\n","import React, { useState, useMemo } from \"react\";\r\nimport example from \"./SudokuTable.json\";\r\nimport { solve, isPossible, handelSolve } from \"./utils2.js\";\r\nimport \"./SudokuTable.css\";\r\n\r\nconst defaultTable = Array(9).fill(Array(9).fill(\"\"));\r\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\nconst SudokuTable = ({ table = defaultTable }) => {\r\n  const [sudoku, setSudoku] = useState(table);\r\n  return (\r\n    <div className=\"container\">\r\n      <table className=\"table\">\r\n        <tbody>\r\n          {sudoku.map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              {row.map((cell, colIndex) => (\r\n                <td\r\n                  key={rowIndex * 10 + colIndex}\r\n                  className={\r\n                    ((rowIndex / 3) | 0) % 2 === ((colIndex / 3) | 0) % 2\r\n                      ? \"bg-secondary\"\r\n                      : \"bg-primary\"\r\n                  }\r\n                >\r\n                  <input\r\n                    type=\"text\"\r\n                    maxLength=\"1\"\r\n                    size=\"1\"\r\n                    value={cell}\r\n                    className=\"text-center\"\r\n                    onChange={({ currentTarget: { value } }) => {\r\n                      if (!/^[1-9]?$/.test(value)) return;\r\n                      setSudoku(([...sudoku]) => {\r\n                        sudoku[rowIndex] = [...sudoku[rowIndex]];\r\n                        sudoku[rowIndex][colIndex] = value ? +value : \"\";\r\n                        return sudoku;\r\n                      });\r\n                    }}\r\n                  />\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <button\r\n        className=\"btn btn-secondary m-2\"\r\n        onClick={() => setSudoku(example[(Math.random() * example.length) | 0])}\r\n      >\r\n        Generate Example\r\n      </button>\r\n      <button\r\n        className=\"btn btn-secondary m-2\"\r\n        onClick={() => setSudoku(defaultTable)}\r\n      >\r\n        {\" \"}\r\n        Reset\r\n      </button>\r\n      <button\r\n        className=\"btn btn-secondary m-2\"\r\n        onClick={() => {\r\n          setSudoku(handelSolve);\r\n        }}\r\n      >\r\n        Solve\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SudokuTable;\r\n","import SudokuTable from \"./component/SudokuTable.jsx\";\nimport \"./App.css\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Sudoku Solver</h1>\n        <h5>\n          Fill in the rows with numbers, when you press the \"Solve\" button the\n          sudoku will solve automatically\n        </h5>\n      </header>\n      <ToastContainer />\n      <SudokuTable />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}